#+STARTUP: overview

* Abbreviations

- ADJI :: Advanced Digital Joystick Interface (new cartridge)
- SJI :: Slogger Joystick Interface (original cartridge)

* Electron Expansion memory usage

Note regarding the overlay routine:

#+begin_quote
The correct way for the Joystick software to emulate the Keyboard is
to intercept the OSBYTE and OSKEY calls using the "Extended Vectors"
residing in the upper part of Page D. Most games, however, stamp all
over Page D and so Slogger had to find an alternative reliable means
of interception since the Slogger Joystick interface and software is
aimed primarily at the games player.

This was achieved by a very short routine resident in a selectable
area of memory defined by the Overlay address. If no value is typed in
at the prompt for the address then the default address of &150 is
used, this rarely being used by games as it is in the middle of the
Stack !!!. Values in the range 0 to &7FF0 may be used but with
caution.
#+end_quote

For storing key definitions, Slogger used 5 locations, corresponding
to the ROM types entries in the table at $2a0 for the following ROM
banks:

| Bank | What                         |
|------+------------------------------|
|    2 | Front expansion socket       |
|    3 | Front expansion socket       |
|    8 | Keyboard                     |
|    9 | Keyboard                     |
|   10 | Lower-priority copy of BASIC |

The SJI has to go in the front expansion socket, and it contains no
ROMs, so those two bytes are known to be free.

The keyboard is not a ROM, so two bytes free there as well.

The lower-priority copy of BASIC is ignored (presumably the Electron
detects duplicate ROMs, same as the Beeb?) so that's free too.

$290 (~*TV~ settings - unused on Electron) is also used to store some
info:

#   7  6    5   4   3   2   1   0
: +---+---+---+---+---+---+---+---+
; |   | 9 |               |  NUM  +
: +---+---+---+---+---+---+---+---+

~9~ is set if 9-pin joysticks are in used, otherwise digital.

~NUM~ is the joystick interface address.

* ADJI memory usage - Electron

Keep the overlay routine. I'm not very familiar with the Electron but
Slogger presumably knew it well.

$290 can stay as-is. Set the `9` bit.

The ADJI ROM uses 3 of the ROM table bytes (2 entries for keyboard, 1
for lower-priority BASIC), and 3 unused locations: $2f5, $2f6 and
$27e.

The other ROM table bytes are unused. In theory, since the ADJI
cartridge occupies two banks, but the ADJI ROM will only use one of
them, there's an extra bank at `?&F4 EOR1` - but that's a lot of
hassle during development.

* ADJI memory usage - Master 128

Multi-load stuff won't do this, but it is typically safe to do ~*TAPE~
and then overwrite page $D. So the overlay routine will still be
necessary.

Claim a dynamic workspace page in HAZEL for the settings. Bit wasteful
(only 6/256 bytes used!), but shouldn't be a problem.

On entry to BYTEV or KEYV, HAZEL could be unmapped. Access it with
interrupts disabled, and restore the old value.

If page $D has been overwritten, the workspace address won't be known,
so the overlay routine will have to supply this.

* Redone jmp_default_XXX routines

Forgot that if there's an IRQ pending, and plp~ re-enables interrupts,
the instruction after ~plp~ will still run! So this is actually quite
safe:

#+begin_src 6502-asm
  plp
  jmp (os_seiwk)
#+end_src


#+begin_src 6502-asm
  ;-------------------------------------------------------------------------
  ; 
  ; jmp_default_osbyte
  ;
  ; ?os_a, ?os_x and ?os_y are known to be available. The first thing
  ; the default OSBYTE routine will do is overwrite them.
  ;
  jmp_default_osbyte: .proc
		  php             ;P
  with_p_already_pushed:
		  pha             ;A P
		  sty os_y
		  lda default_vectors_ptr+0
		  sta os_a
		  lda default_vectors_ptr+1
		  sta os_x
		  ldy #<bytev
		  lda (os_a),y    ;routine LSB
		  pha             ;RoutL A P
		  iny
		  lda (os_a),y    ;routine MSB
		  sta os_x
		  pla             ;A P
		  sta os_a
		  pla             ;P
		  plp             ;
		  jmp (os_a)
		  .endproc

  ;-------------------------------------------------------------------------
  ;
  ; jmp_default_keyv
  ;
  ; This is careful not to step on ?os_a, ?os_x and ?os_y. Might be
  ; overkill, but it is simplified somewhat as A is known not to be an
  ; input to KEYV.

  jmp_default_keyv: .proc
		  php             ;P
  with_p_already_pushed:
		  sei
		  sty os_seia
		  lda default_vectors_ptr+0
		  sta os_seiwk+0
		  lda default_vectors_ptr+1
		  sta os_seiwk+1
		  ldy #<keyv
		  lda (os_seiwk),y
		  pha             ;RoutL P
		  iny
		  lda (os_seiwk),y
		  stx os_seiwk+0
		  tsx             ;| RoutL P
		  ldy $102,x      ;P
		  sta $102,x      ;| RoutL RoutH
		  tya
		  pha             ;P RoutL RoutH
		  ldx os_seiwk+0
		  ldy os_seia
		  rti
		  .endproc
#+end_src
blah.
* Test programs notes

** ~ADJITEST~ /(BBC only)/

Scans all suitable addresses in page $fc (including ones the ADJI
doesn't actually occupy), interprets the value read as joystick
inputs, and shows the results.

White means not pressed.

Red means newly pressed.

Magenta means pressed.

** ~INPTEST~

Some input tests.

*** ~ADVAL~

Prints ~ADVAL~ results.

*** ~KEYBOARD SCAN (SINGLE)~

Prints the results of doing a keyboard poll with OSBYTE $79, X bit 7 set.
Prints ~1~ against any pressed keys.

The moving ~*~ shows which key is being scanned currently.

*** ~KEYBOARD SCAN (MULTIPLE)~

Prints the results of doing a keyboard scan with OSBYTE $79, X bit 7
clear. Prints ~1~ against any pressed keys.

~>~ indicates the key to start scanning from. Adjust with cursor up
and down.

~-~ indicates the excluded key, as stored in location $ee. Adjust with
cursor left and right.

*** ~INKEY (POLL)~

Prints the results of doing a keyboard poll with OSBYTE $81, Y=$ff.
Prints ~1~ against any pressed keys.

The moving ~*~ shows which key is being scanned currently.

*** ~INKEY (TIMED)~

Prints the results of doing a keyboard scan with time limit using
OSBYTE $81, Y bit 7 clear. The timeout is 2 seconds.

The OSBYTE results are printed.

** ~ADVALTEST~

Prints ~ADVAL~ results.

* Electron key stuff

Keyboard translation table: $edd3 - indexed by ULA hardware key number
rather than internal key number though...

ULA hardware key number appears to be as per EAUG p225

| Column | Address | Index |   |  Bit 0 | Bit 1   | Bit 2  | Bit 3  |
|--------+---------+-------+---+--------+---------+--------+--------|
|      0 | &BFFE   |    00 |   |  Right | Copy    | NC     | Space  |
|      1 | &BFFD   |    04 |   |   Left | Down    | Return | Delete |
|      2 | &BFFB   |    08 |   |      - | Up      | :      | NC     |
|      3 | &BFF7   |    0c |   |      0 | P       | ;      | /      |
|      4 | &BFEF   |    10 |   |      9 | O       | L      | .      |
|      5 | &BFDF   |    14 |   |      8 | I       | K      | ,      |
|      6 | &BFBF   |    18 |   |      7 | U       | J      | M      |
|      7 | &BF7F   |    1c |   |      6 | Y       | H      | N      |
|      8 | &BEFF   |    20 |   |      5 | T       | G      | B      |
|      9 | &BDFF   |    24 |   |      4 | R       | F      | V      |
|      A | &BBFF   |    28 |   |      3 | E       | D      | C      |
|      B | &B7FF   |    2c |   |      2 | W       | S      | X      |
|      C | &AFFF   |    30 |   |      1 | Q       | A      | Z      |
|      D | &9FFF   |    34 |   | Escape | Caps Lk | Ctrl   | Shift  |

$ee40 maps INKEY number to hardware key number.


| Key          | IntH | InkH | INKEY | Electron |
|--------------+------+------+-------+----------|
| A            |   41 | be   |   -66 |       32 |
| B            |   64 | 9b   |  -101 |       23 |
| C            |   52 | ad   |   -83 |       2b |
| D            |   32 | cd   |   -51 |       2a |
| E            |   22 | dd   |   -35 |       29 |
| F            |   43 | bc   |   -68 |       26 |
| G            |   53 | ac   |   -84 |       22 |
| H            |   54 | ab   |   -85 |       1e |
| I            |   25 | da   |   -38 |       15 |
| J            |   45 | ba   |   -70 |       1a |
| K            |   46 | b9   |   -71 |       16 |
| L            |   56 | a9   |   -87 |       12 |
| M            |   65 | 9a   |  -102 |       1b |
| N            |   55 | aa   |   -86 |       1f |
| O            |   36 | c9   |   -55 |       11 |
| P            |   37 | c8   |   -56 |       0d |
| Q            |   10 | ef   |   -17 |       31 |
| R            |   33 | cc   |   -52 |       25 |
| S            |   51 | ae   |   -82 |       2e |
| T            |   23 | dc   |   -36 |       22 |
| U            |   35 | ca   |   -54 |       19 |
| V            |   63 | 9c   |  -100 |       27 |
| W            |   21 | de   |   -34 |       2d |
| X            |   42 | bd   |   -67 |       2f |
| Y            |   44 | bb   |   -69 |       1d |
| Z            |   61 | 9e   |   -98 |       33 |
| 0            |   27 | d8   |   -40 |       0c |
| 1            |   30 | cf   |   -49 |       30 |
| 2            |   31 | ce   |   -50 |       2c |
| 3            |   11 | ee   |   -18 |       28 |
| 4            |   12 | ed   |   -19 |       24 |
| 5            |   13 | ec   |   -20 |       20 |
| 6            |   34 | cb   |   -53 |       1c |
| 7            |   24 | db   |   -37 |       18 |
| 8            |   15 | ea   |   -22 |       14 |
| 9            |   26 | d9   |   -39 |       10 |
| -            |   17 | e8   |   -24 |       08 |
| ;            |   57 | a8   |   -88 |       0e |
| :            |   48 | b7   |   -73 |       0a |
| ,            |   66 | 99   |  -103 |       17 |
| .            |   67 | 98   |  -104 |       13 |
| /            |   68 | 97   |  -105 |       0f |
| SPACE        |   62 | 9d   |   -99 |       03 |
| ESCAPE       |   70 | 8f   |  -113 |       34 |
| DELETE       |   59 | a6   |   -90 |       07 |
| RETURN       |   49 | b6   |   -74 |       06 |
| CURSOR UP    |   39 | c6   |   -58 |       09 |
| CURSOR DOWN  |   29 | d6   |   -42 |       05 |
| CURSOR LEFT  |   19 | e6   |   -26 |       04 |
| CURSOR RIGHT |   79 | 86   |  -122 |       00 |
| COPY         |   69 | 96   |  -106 |       01 |
| SHIFT        |   00 | ff   |    -1 |       37 |
| CTRL         |   01 | fe   |    -2 |       36 |
| CAPS LOCK    |   40 | bf   |   -65 |       34 |


| Int | Int | INKEY | Key |
|-----+-----+-------+-----|
|     |     |       |     |

* 16-bit decrement

Tidy code from MOS 3.20, which would also work well for time in X/Y.

#+begin_src 6502-asm
  intervalTimerDone:
		  lda inkeyTimeoutCounter+0
		  bne LE715
		  lda inkeyTimeoutCounter+1
		  beq LE718
		  dec inkeyTimeoutCounter+1
  LE715:
		  dec inkeyTimeoutCounter+0
  LE718:
#+end_src

* Games tested

** StarshipCommand

Works OK with extended vectors

** Aviator

Crashes - looks like it scribbles over page $d!

** Firebug

Works OK with overlay at &150



* BASIC Editor OSBYTE vs overlay issue

** qnd investigation

stack contents...

17
35
8d

# 8d, 17 presumably from this
					                ; Insert overlay exit routine address
.8d0a	a9 8d		lda #$8d	                lda #>handle_overlay_exit_electron-1
.8d0c	48		pha		                pha             ;ExitH ROMSEL RetL RetH
.8d0d	a9 17		lda #$17	                lda #<handle_overlay_exit_electron-1
.8d0f	48		pha		                pha             ;ExitL ExitH ROMSEL RetL RetH

...but what about the 35?!

62
8d

.8d5f	28		plp		                plp
.8d60	20 e6 8e	jsr $8ee6	                jsr jmp_default_osbyte.with_p_already_pushed
.8d63	60		rts		                rts

01

ROM of BASIC editor

ae
9b

.9baa					do_options_osbyte:
.9baa	a9 1a		lda #$1a	                lda #OPTIONS_OSBYTE   ;must be position-independent
.9bac	20 f4 ff	jsr $fff4	                jsr osbyte            ;must be position-independent


b3
80

.80af					svc_brk:
.80af	98		tya		                tya
.80b0	48		pha		                pha
.80b1	20 b1 9b	jsr $9bb1	                jsr language.get_options

** debug_store_state 1

#+begin_example
  P=&B5 A=&EA X=&00 Y=&FF S=&EC
   B5 : P
   57 8D : .8d55	20 a1 90	jsr $90a1	                jsr debug_store_state
   B0 : P
   1F 8D : handle_overlay_exit_electron:
   0D : ROMSEL
   F0 87 : .87ee	20 f4 ff	jsr $fff4	                jsr osbyte
   1E 84 : .841c	20 7a 90	jsr $907a	                jsr call_command_table_routine
   00 : saved Y
   04 : saved A
   BD F0 : JSR &8003       :\ F0BB= 20 03 80     ..
   0B
  P=&B4 A=&1A X=&FF Y=&FF S=&DA
   B4 : P
   57 8D  : ^^^
   35 : P
   1F 8D : ^^^
   01 : ROMSEL
   AE 9B : .9bac	20 f4 ff	jsr $fff4	                jsr osbyte            ;must be position-independent
   B3 80 : .80b1	20 b1 9b	jsr $9bb1	                jsr language.get_options
   FF : saved Y
   06 : saved A
   BD F0 : JSR &8003
   0D
  P=&36 A=&1A X=&FF Y=&00 S=&C8
   36 57 8D 35 1F 8D 01 AE
   9B B3 80 00 06 BD F0 0D
  P=&36 A=&1A X=&FF Y=&00 S=&B6
   36 57 8D 35 1F 8D 01 AE
   9B B3 80 00 06 BD F0 0D
  P=&36 A=&1A X=&FF Y=&00 S=&A4
   36 57 8D 35 1F 8D 01 AE
   9B B3 80 00 06 BD F0 0D
  P=&36 A=&1A X=&FF Y=&00 S=&92
   36 57 8D 35 1F 8D 01 AE
   9B B3 80 00 06 BD F0 0D
  P=&36 A=&1A X=&FF Y=&00 S=&80
   36 57 8D 35 1F 8D 01 AE
   9B B3 80 00 06 BD F0 0D
  P=&36 A=&1A X=&FF Y=&00 S=&6E
   36 57 8D 35 1F 8D 01 AE
   9B B3 80 00 06 BD F0 0D
#+end_example

** debug_store_state 2

#+begin_example
  P=&B5 A=&EA X=&00 Y=&FF S=&ED
   &01ED: 57
   &01EE: 8D : .8d55	20 a1 90	jsr $90a1	                jsr debug_store_state
   &01EF: B0 : P
   &01F0: 1F
   &01F1: 8D : handle_overlay_exit_electron:
   &01F2: 0D : ROMSEL
   &01F3: F0
   &01F4: 87 : .87ee	20 f4 ff	jsr $fff4	                jsr osbyte
   &01F5: 1E
   &01F6: 84 : .841c	20 7a 90	jsr $907a	                jsr call_command_table_routine
   &01F7: 00 : saved Y
   &01F8: 04 : saved A
   &01F9: BD
   &01FA: F0 : JSR &8003       :\ F0BB= 20 03 80     ..
   &01FB: 0B : original ROM (BASIC)
   &01FC: B0
   &01FD: DD : JSR LF0A8       :\ DDAE= 20 A8 F0     (p
   &01FE: CB
   &01FF: BE : BEC9 jsr $fff7 (BASIC 2 ROM)

  P=&B4 A=&1A X=&FF Y=&FF S=&DB
   &01DB: 57
   &01DC: 8D : ^^^
   &01DD: 35 : P
   &01DE: 1F
   &01DF: 8D : ^^^
   &01E0: 01 : ROMSEL
   &01E1: AE
   &01E2: 9B : .9bac	20 f4 ff	jsr $fff4	                jsr osbyte            ;must be position-independent
   &01E3: B3
   &01E4: 80 : .80b1	20 b1 9b	jsr $9bb1	                jsr language.get_options
   &01E5: FF : saved Y
   &01E6: 06 : saved A
   &01E7: BD
   &01E8: F0 : JSR &8003       :\ F0BB= 20 03 80     ..
   &01E9: 0D : original ROM (ADJI)
   &01EA: 1F
   &01EB: DB : LDX #&06:JSR LF0A8   :\ Issue service call 6 - BRK occured
   &01EC: 00 : old X
   &01ED: B8 : P pushed by BRK
   &01EE: 90 
   &01EF: B0 : address of BRK... WHAT IS THIS
   &01F0: 1F
   &01F1: 8D
   &01F2: 0D
  P=&36 A=&1A X=&FF Y=&00 S=&C9
   &01C9: 57
   &01CA: 8D
   &01CB: 35
   &01CC: 1F
   &01CD: 8D
   &01CE: 01
   &01CF: AE
   &01D0: 9B
   &01D1: B3
   &01D2: 80
   &01D3: 00
   &01D4: 06
   &01D5: BD
   &01D6: F0
   &01D7: 0D
   &01D8: 1F
   &01D9: DB
   &01DA: 00
   &01DB: 39
   &01DC: 90
   &01DD: 35 : address of BRK... hmm...
   &01DE: 1F
   &01DF: 8D
   &01E0: 01
  P=&36 A=&1A X=&FF Y=&00 S=&B7
   &01B7: 57
   &01B8: 8D
   &01B9: 35
   &01BA: 1F
   &01BB: 8D
   &01BC: 01
   &01BD: AE
   &01BE: 9B
   &01BF: B3
   &01C0: 80
   &01C1: 00
   &01C2: 06
   &01C3: BD
   &01C4: F0
   &01C5: 0D
   &01C6: 1F
   &01C7: DB
   &01C8: 00
   &01C9: 39
   &01CA: 90
   &01CB: 35
   &01CC: 1F
   &01CD: 8D
   &01CE: 01
  P=&36 A=&1A X=&FF Y=&00 S=&A5
   &01A5: 57
   &01A6: 8D
   &01A7: 35
   &01A8: 1F
   &01A9: 8D
   &01AA: 01
   &01AB: AE
   &01AC: 9B
   &01AD: B3
   &01AE: 80
   &01AF: 00
   &01B0: 06
   &01B1: BD
   &01B2: F0
   &01B3: 0D
   &01B4: 1F
   &01B5: DB
   &01B6: 00
   &01B7: 39
   &01B8: 90
   &01B9: 35
   &01BA: 1F
   &01BB: 8D
   &01BC: 01
  P=&36 A=&1A X=&FF Y=&00 S=&93
   &0193: 57
   &0194: 8D
   &0195: 35
   &0196: 1F
   &0197: 8D
   &0198: 01
   &0199: AE
   &019A: 9B
   &019B: B3
   &019C: 80
   &019D: 00
   &019E: 06
   &019F: BD
   &01A0: F0
   &01A1: 0D
   &01A2: 1F
   &01A3: DB
   &01A4: 00
   &01A5: 39
   &01A6: 90
   &01A7: 35
   &01A8: 1F
   &01A9: 8D
   &01AA: 01
  P=&36 A=&1A X=&FF Y=&00 S=&81
   &0181: 57
   &0182: 8D
   &0183: 35
   &0184: 1F
   &0185: 8D
   &0186: 01
   &0187: AE
   &0188: 9B
   &0189: B3
   &018A: 80
   &018B: 00
   &018C: 06
   &018D: BD
   &018E: F0
   &018F: 0D
   &0190: 1F
   &0191: DB
   &0192: 00
   &0193: 39
   &0194: 90
   &0195: 35
   &0196: 1F
   &0197: 8D
   &0198: 01
  P=&36 A=&1A X=&FF Y=&00 S=&6F
   &016F: 57
   &0170: 8D
   &0171: 35
   &0172: 1F
   &0173: 8D
   &0174: 01
   &0175: AE
   &0176: 9B
   &0177: B3
   &0178: 80
   &0179: 00
   &017A: 06
   &017B: BD
   &017C: F0
   &017D: 0D
   &017E: 1F
   &017F: DB
   &0180: 00
   &0181: 39
   &0182: 90
   &0183: 35
   &0184: 1F
   &0185: 8D
   &0186: 01
#+end_example




* Defaults ideas

(U D L R F1 F2)

Electron combinations:

| Keys                            | Numbers                 |
|---------------------------------+-------------------------|
| A Z , . M M                     | &8E &9E &99 &98 &9A &9A |
| COPY COPY Z &BL DELETE DELETE   | &96 &96 &9E &BD &B6 &B6 |
| COPY COPY CTRL A DELETE DELETE  | &96 &96 &FE &BE &B6 &B6 |
| SPACE A , . X Z                 | &9D &BE &99 &98 &BD &9E |
| DELETE DELETE Z X DELETE DELETE | &B6 &B6 &9E &BD &A6 &A6 |
| : / Z X SPACE SPACE             | &B7 &97 &9E &BD &9D &9D |
| : / Z X SPACE SHIFT             | &B7 &97 &9E &BD &9D &FF |
| : / Z X DELETE DELETE           | &B7 &97 &9E &BD &A6 &A6 |
| : / Z X S D                     | &B7 &97 &9E &BD &AE &CD |
| : / Z X DELETE SPACE            | &B7 &97 &9E &BD &B6 &9D |
| : / Z X DELETE DELETE           | &B7 &97 &9E &BD &B6 &B6 |
| : / Z X DELETE SHIFT            | &B7 &97 &9E &BD &B6 &FF |
| : / Z X RETURN D                | &B7 &97 &9E &BD &BC &CD |
| : / Z X Q Q                     | &B7 &97 &9E &BD &EF &EF |
| : / Z X SHIFT DELETE            | &B7 &97 &9E &BD &FF &B6 |
| : / Z X SHIFT SHIFT             | &B7 &97 &9E &BD &FF &FF |
| : / Z X RETURN DELETE           | &B7 &97 &9E &BD &B6 &B5 |
| A Z , . SPACE SPACE             | &BE &9E &99 &98 &9D &9D |
| W S Z X Q Q                     | &DE &AE &9E &BD &EF &EF |
| Q Q Z X DELETE DELETE           | &EF &EF &9E &BD &B6 &B6 |
| Q Q Z X DELETE SHIFT            | &EF &EF &9E &BD &B6 &FF |
| Q Q Z X SHIFT SPACE             | &EF &EF &9E &BD &FF &9D |
| Q Q Z X SHIFT SHIFT             | &EF &EF &9E &BD &FF &FF |
| SHIFT SHIFT Z X DELETE SPACE    | &FF &FF &9E &BD &B6 &9D |

If presenting the output in tabular format, max 5 chars per key:

: 0123456789012345678901234567890123456789
: #  Up    Down  Left  Right Fire1 Fire2
: xx xxxxx xxxxx xxxxx xxxxx xxxxx xxxxx
: 00 :     /     Z     X     RET   RET
: 01 A     Z     ,     .     SPACE SPACE

For most keys, that's ok. Some will need abbreviating. Ideas:

- ~ESCAPE~ :: ~ESC~
- ~DELETE~ :: ~DEL~
- ~RETURN~ :: ~RET~
- ~UP CURSOR~ :: ~UP~
- ~DOWN CURSOR~ :: ~DOWN~
- ~LEFT CURSOR~ :: ~LEFT~
- ~RIGHT CURSOR~ :: ~RIGHT~
- ~CAPS LOCK~ :: ~CAPS~
- ~SHIFT LOCK~ :: ~SHFLK~
- ~NUM RETURN~ :: ~NRET~
- ~NUM DELETE~ :: ~NDEL~

~Nxxx~ might be better for numeric keys anyway.

ESC, DEL, RET, etc. also aren't too barbaric. 

Maybe just alays use these names anyway? A big advantage is that they
have no spaces, so I could dodge upgrading the code to use GSINIT/GSREAD.


Master combinations:

&B7 &97 &9E &BD &B6 &9D
&B7 &97 &9E &BD &B6 &9F
&B7 &97 &9E &BD &B6 &FF
&B7 &97 &DE &DD &9F &FE
&EF &BE &C9 &C8 &9D &B6





* eof
